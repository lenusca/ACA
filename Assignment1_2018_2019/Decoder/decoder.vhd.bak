library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity Decoder is
	port(x : in std_logic_vector(14 downto 0);
		  e : out std_logic_vector(3 downto 0));
end Decoder;

architecture Structural of Decoder is
	signal s_xor1, s_xor2, s_xor3, s_xor4, s_xor5, s_xor6, s_xor7, s_xor8, s_xor9, s_xor10, s_xor11: std_logic;
	begin
		xor1: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(0),
								dataIn1 => x(1),
								dataOut => s_xor1);
								
		xor2: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(2),
								dataIn1 => x(3),
								dataOut => s_xor2);
								
		xor3: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(4),
								dataIn1 => x(5),
								dataOut => s_xor3);
								
		xor4: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(6),
								dataIn1 => x(11),
								dataOut => s_xor4);
								
		xor5: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(7),
								dataIn1 => x(8),
								dataOut => s_xor5);
								
		xor6: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(9),
								dataIn1 => x(12),
								dataOut => s_xor6);
								
		xor7: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(10),
								dataIn1 => x(13),
								dataOut => s_xor7);
								
		xor8: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(0),
								dataIn1 => x(2),
								dataOut => s_xor8);
								
		xor9: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(4),
								dataIn1 => x(6),
								dataOut => s_xor9);
								
		xor10: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(7),
								dataIn1 => x(9),
								dataOut => s_xor10);
								
		xor11: entity work.XOR2_1(Behav)
					port map(dataIn0 => x(7),
								dataIn1 => x(9),
								dataOut => s_xor11);
							
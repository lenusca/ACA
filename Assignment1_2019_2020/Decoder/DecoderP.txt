library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity Validation is
port (c         : in std_logic_vector(3 downto 0);
      one,flag : out std_logic);
end Validation;

architecture logFunction of Validation is
signal s_zero :std_logic;
signal s_one :std_logic;	


begin
	s_one    <= (c(3) and c(2) and(c(1) or c(0))) or (c(1) and c(0) and (c(3) or c(2)));
	s_zero   <= (not(c(3) or c(2)) and not(c(1) and c(0))) or (not(c(1) or c(0)) and not(c(3) and c(2)));
	one  <= s_one;
	flag  <=  s_one or s_zero;
end logFunction; 


entity DecoderP is
port (dataIn         : in std_logic_vector(7 downto 0);
      dataOut        : out std_logic_vector(3 downto 0);
		valid          : out std_logic);
end DecoderP;


architecture structure of DecoderP is
signal s_m0:std_logic_vector(3 downto 0);
signal s_m1:std_logic_vector(3 downto 0);
signal s_m2:std_logic_vector(3 downto 0);

component Validation
port (c         : in std_logic_vector(3 downto 0);
      one,flag  : out std_logic);
end component;

begin
	
	--m0---
	xor0_m0: entity work.XOR2_1(Behav)
					port map(dataIn(0),dataIn(1) => s_m0(0));
	
	xor1_m0: entity work.XOR2_1(Behav)
					port map(dataIn(2),dataIn(3) => s_m0(1));
					
	xor2_m0: entity work.XOR2_1(Behav)
					port map(dataIn(4),dataIn(5) => s_m0(2));
					
	xor3_m0: entity work.XOR2_1(Behav)
					port map(dataIn(6),dataIn(7) => s_m0(3));
					
	--m1--
	
	xor0_m1: entity work.XOR2_1(Behav)
					port map(dataIn(0),dataIn(2) => s_m1(0));
	
	xor1_m1: entity work.XOR2_1(Behav)
					port map(dataIn(1),dataIn(3) => s_m1(1));
					
	xor2_m1: entity work.XOR2_1(Behav)
					port map(dataIn(4),dataIn(6) => s_m1(2));
					
	xor3_m1: entity work.XOR2_1(Behav)
					port map(dataIn(5),dataIn(7) => s_m1(3));				
					
	
	--m2--
	
	
	xor0_m2: entity work.XOR2_1(Behav)
					port map(dataIn(0),dataIn(4) => s_m2(0));
	
	xor1_m2: entity work.XOR2_1(Behav)
					port map(dataIn(1),dataIn(5) => s_m2(1));
					
	xor2_m2: entity work.XOR2_1(Behav)
					port map(dataIn(2),dataIn(6) => s_m2(2));
					
	xor3_m2: entity work.XOR2_1(Behav)
					port map(dataIn(3),dataIn(7) => s_m2(3));	
		
end		
	
	

